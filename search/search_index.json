{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation \u00a4 Dependencies: poppler-utils pip install doc-loader Optional Installs \u00a4 Optionally you can also install the package with extra features Dependencies: mupdf pip install doc-loader [ pdf_text_extract ] This plugin allows you to get text from a searchable pdf Core package usage \u00a4 Files on disk from doc_loader import DocumentLoader , OutputType path = \"/opt/working/src/tests/data/tmp.png\" # Open file using path page_count , document = DocumentLoader . load ( path , max_num_pages = 2 , output_type = OutputType . NUMPY ) print ( page_count , document ) Files in memory - fastapi.UploadFile from doc_loader import DocumentLoader , OutputType from fastapi import UploadFile path = \"/opt/working/src/tests/data/tmp.png\" # Open file using UploadFile with open ( path , \"rb\" ) as fp : upload_file = UploadFile ( path , fp ) page_count , document = DocumentLoader . load ( upload_file , max_num_pages = 2 , output_type = OutputType . NUMPY ) print ( page_count , document ) Files in memory - werkzeug.FileStorage from doc_loader import DocumentLoader , OutputType from werkzeug.datastructures import FileStorage path = \"/opt/working/src/tests/data/tmp.png\" # Open file using FileStorage with open ( path , \"rb\" ) as fp : file_storage = FileStorage ( fp , filename = path ) page_count , document = DocumentLoader . load ( file_storage , max_num_pages = 2 , output_type = OutputType . NUMPY ) print ( page_count , document ) PDF text extraction - Optional \u00a4 extract_text_pdf - allows you to get text from a searchable pdf if possible, otherwise will raise an error that can be handled, to use this pip install doc_loader[pdf_text_extract] Files on disk from doc_loader import extract_text_pdf path = \"/opt/working/src/tests/data/is-doc-has-cgtext.pdf\" # Open file using path page_count , document = extract_text_pdf ( path , max_num_pages = 2 ) print ( page_count , document ) Files in memory - fastapi.UploadFile from doc_loader import extract_text_pdf from fastapi import UploadFile path = \"/opt/working/src/tests/data/is-doc-has-cgtext.pdf\" # Open file using UploadFile with open ( path , \"rb\" ) as fp : upload_file = UploadFile ( path , fp ) page_count , document = extract_text_pdf ( upload_file , max_num_pages = 2 ) print ( page_count , document ) Files in memory - werkzeug.FileStorage from doc_loader import extract_text_pdf from werkzeug.datastructures import FileStorage path = \"/opt/working/src/tests/data/is-doc-has-cgtext.pdf\" # Open file using FileStorage with open ( path , \"rb\" ) as fp : file_storage = FileStorage ( fp , filename = path ) page_count , document = extract_text_pdf ( file_storage , max_num_pages = 2 ) print ( page_count , document )","title":"Getting Started"},{"location":"#installation","text":"Dependencies: poppler-utils pip install doc-loader","title":"Installation"},{"location":"#optional-installs","text":"Optionally you can also install the package with extra features Dependencies: mupdf pip install doc-loader [ pdf_text_extract ] This plugin allows you to get text from a searchable pdf","title":"Optional Installs"},{"location":"#core-package-usage","text":"Files on disk from doc_loader import DocumentLoader , OutputType path = \"/opt/working/src/tests/data/tmp.png\" # Open file using path page_count , document = DocumentLoader . load ( path , max_num_pages = 2 , output_type = OutputType . NUMPY ) print ( page_count , document ) Files in memory - fastapi.UploadFile from doc_loader import DocumentLoader , OutputType from fastapi import UploadFile path = \"/opt/working/src/tests/data/tmp.png\" # Open file using UploadFile with open ( path , \"rb\" ) as fp : upload_file = UploadFile ( path , fp ) page_count , document = DocumentLoader . load ( upload_file , max_num_pages = 2 , output_type = OutputType . NUMPY ) print ( page_count , document ) Files in memory - werkzeug.FileStorage from doc_loader import DocumentLoader , OutputType from werkzeug.datastructures import FileStorage path = \"/opt/working/src/tests/data/tmp.png\" # Open file using FileStorage with open ( path , \"rb\" ) as fp : file_storage = FileStorage ( fp , filename = path ) page_count , document = DocumentLoader . load ( file_storage , max_num_pages = 2 , output_type = OutputType . NUMPY ) print ( page_count , document )","title":"Core package usage"},{"location":"#pdf-text-extraction-optional","text":"extract_text_pdf - allows you to get text from a searchable pdf if possible, otherwise will raise an error that can be handled, to use this pip install doc_loader[pdf_text_extract] Files on disk from doc_loader import extract_text_pdf path = \"/opt/working/src/tests/data/is-doc-has-cgtext.pdf\" # Open file using path page_count , document = extract_text_pdf ( path , max_num_pages = 2 ) print ( page_count , document ) Files in memory - fastapi.UploadFile from doc_loader import extract_text_pdf from fastapi import UploadFile path = \"/opt/working/src/tests/data/is-doc-has-cgtext.pdf\" # Open file using UploadFile with open ( path , \"rb\" ) as fp : upload_file = UploadFile ( path , fp ) page_count , document = extract_text_pdf ( upload_file , max_num_pages = 2 ) print ( page_count , document ) Files in memory - werkzeug.FileStorage from doc_loader import extract_text_pdf from werkzeug.datastructures import FileStorage path = \"/opt/working/src/tests/data/is-doc-has-cgtext.pdf\" # Open file using FileStorage with open ( path , \"rb\" ) as fp : file_storage = FileStorage ( fp , filename = path ) page_count , document = extract_text_pdf ( file_storage , max_num_pages = 2 ) print ( page_count , document )","title":"PDF text extraction - Optional"},{"location":"about_us/","text":"About Us \u00a4 Capgemini Invent combines strategy, technology, data science and creative design to solve the most complex business and technology challenges. \u00a4 Disruption is not new, but the pace of change is. The fourth industrial revolution is forcing businesses to rethink everything they know. Leading organizations behave as living entities, constantly adapting to change. With invention at their core, they continuously redesign their business to generate new sources of value. Winning is about fostering inventive thinking to create what comes next. Invent. Build. Transform. \u00a4 This is why we have created Capgemini Invent, Capgemini\u2019s new digital innovation, consulting and transformation global business line. Our multi-disciplinary team helps business leaders find new sources of value. We accelerate the process of turning ideas into prototypes and scalable real-world solutions; leveraging the full business and technology expertise of the Capgemini Group to implement at speed and scale. The result is a coordinated approach to transformation, enabling businesses to create the products, services, customer experiences, and business models of the future. We're Hiring! \u00a4 Do you want to be part of the team that builds doc_loader and other great products at Capgemini Invent? If so, you're in luck! Capgemini Invent is currently hiring Data Scientists who love using data to drive their decisions. Take a look at our open positions and see if you're a fit.","title":"About Us"},{"location":"about_us/#about-us","text":"","title":"About Us"},{"location":"about_us/#capgemini-invent-combines-strategy-technology-data-science-and-creative-design-to-solve-the-most-complex-business-and-technology-challenges","text":"Disruption is not new, but the pace of change is. The fourth industrial revolution is forcing businesses to rethink everything they know. Leading organizations behave as living entities, constantly adapting to change. With invention at their core, they continuously redesign their business to generate new sources of value. Winning is about fostering inventive thinking to create what comes next.","title":"Capgemini Invent combines strategy, technology, data science and creative design to solve the most complex business and technology challenges."},{"location":"about_us/#invent-build-transform","text":"This is why we have created Capgemini Invent, Capgemini\u2019s new digital innovation, consulting and transformation global business line. Our multi-disciplinary team helps business leaders find new sources of value. We accelerate the process of turning ideas into prototypes and scalable real-world solutions; leveraging the full business and technology expertise of the Capgemini Group to implement at speed and scale. The result is a coordinated approach to transformation, enabling businesses to create the products, services, customer experiences, and business models of the future.","title":"Invent. Build. Transform."},{"location":"about_us/#were-hiring","text":"Do you want to be part of the team that builds doc_loader and other great products at Capgemini Invent? If so, you're in luck! Capgemini Invent is currently hiring Data Scientists who love using data to drive their decisions. Take a look at our open positions and see if you're a fit.","title":"We're Hiring!"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . v0.1.2 - 2020-09-08 \u00a4 Add error handling to password protected searchable pdf's v0.1.1 - 2020-09-08 \u00a4 Apply patch to Pillow dependency from 7.0.0 to 7.2.0 v0.1.0 - 2020-09-08 \u00a4 Initial commit of code, includes: Loading from fastapi.UploadFile Loading from werkzeug.FileStorage Loading from local file using str or pathlib.Path Output as List[PIL.Image] or List[np.ndarray] Applys EXIF orientation to jpg/png if it can Handles TIFF, JPG, PNG, PDF files Handles password protected PDF's with exceptions Able to choose dpi of pdf to image rendering 674 unit tests with high coverage 100% Docstring coverage","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#v012-2020-09-08","text":"Add error handling to password protected searchable pdf's","title":"v0.1.2 - 2020-09-08"},{"location":"changelog/#v011-2020-09-08","text":"Apply patch to Pillow dependency from 7.0.0 to 7.2.0","title":"v0.1.1 - 2020-09-08"},{"location":"changelog/#v010-2020-09-08","text":"Initial commit of code, includes: Loading from fastapi.UploadFile Loading from werkzeug.FileStorage Loading from local file using str or pathlib.Path Output as List[PIL.Image] or List[np.ndarray] Applys EXIF orientation to jpg/png if it can Handles TIFF, JPG, PNG, PDF files Handles password protected PDF's with exceptions Able to choose dpi of pdf to image rendering 674 unit tests with high coverage 100% Docstring coverage","title":"v0.1.0 - 2020-09-08"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00a4 Nothing easier! Fork and clone the repository, then: docker-compose up -d docker exec -it doc-loader bash That's it! You now have the dependencies installed. Development \u00a4 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: Ensure to run isort -rc . followed by black . --line-length=120 from the root directory Follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00a4 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00a4 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: docker-compose up -d docker exec -it doc-loader bash That's it! You now have the dependencies installed.","title":"Environment setup"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation Before committing: Ensure to run isort -rc . followed by black . --line-length=120 from the root directory Follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup = SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"license/","text":"Mozilla Public License Version 2.0 \u00a4 Copyright (c) 2020, Capgemini Invent IDE All rights reserved. 1. Definitions \u00a4 1.1. \"Contributor\" means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software. 1.2. \"Contributor Version\" means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor's Contribution. 1.3. \"Contribution\" means Covered Software of a particular Contributor. 1.4. \"Covered Software\" means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof. 1.5. \"Incompatible With Secondary Licenses\" means (a) that the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or (b) that the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License. 1.6. \"Executable Form\" means any form of the work other than Source Code Form. 1.7. \"Larger Work\" means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software. 1.8. \"License\" means this document. 1.9. \"Licensable\" means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License. 1.10. \"Modifications\" means any of the following: (a) any file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or (b) any new file in Source Code Form that contains any Covered Software. 1.11. \"Patent Claims\" of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version. 1.12. \"Secondary License\" means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses. 1.13. \"Source Code Form\" means the form of the work preferred for making modifications. 1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising rights under this License. For legal entities, \"You\" includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, \"control\" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity. 2. License Grants and Conditions \u00a4 2.1. Grants Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license: (a) under intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and (b) under Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version. 2.2. Effective Date The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution. 2.3. Limitations on Grant Scope The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor: (a) for any code that a Contributor has removed from Covered Software; or (b) for infringements caused by: (i) Your and any other third party's modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or (c) under Patent Claims infringed by Covered Software in the absence of its Contributions. This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4). 2.4. Subsequent Licenses No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3). 2.5. Representation Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License. 2.6. Fair Use This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents. 2.7. Conditions Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1. 3. Responsibilities \u00a4 3.1. Distribution of Source Form All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients' rights in the Source Code Form. 3.2. Distribution of Executable Form If You distribute Covered Software in Executable Form then: (a) such Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and (b) You may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients' rights in the Source Code Form under this License. 3.3. Distribution of a Larger Work You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s). 3.4. Notices You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies. 3.5. Application of Additional Terms You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction. 4. Inability to Comply Due to Statute or Regulation \u00a4 If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it. 5. Termination \u00a4 5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice. 5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate. 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination. * Disclaimer of Warranty * ------------------------- * * Covered Software is provided under this License on an \"as is\" * basis, without warranty of any kind, either expressed, implied, or * statutory, including, without limitation, warranties that the * Covered Software is free of defects, merchantable, fit for a * particular purpose or non-infringing. The entire risk as to the * quality and performance of the Covered Software is with You. * Should any Covered Software prove defective in any respect, You * (not any Contributor) assume the cost of any necessary servicing, * repair, or correction. This disclaimer of warranty constitutes an * essential part of this License. No use of any Covered Software is * authorized under this License except under this disclaimer. * * * Limitation of Liability * -------------------------- * * Under no circumstances and under no legal theory, whether tort * (including negligence), contract, or otherwise, shall any * Contributor, or anyone who distributes Covered Software as * permitted above, be liable to You for any direct, indirect, * special, incidental, or consequential damages of any character * including, without limitation, damages for lost profits, loss of * goodwill, work stoppage, computer failure or malfunction, or any * and all other commercial damages or losses, even if such party * shall have been informed of the possibility of such damages. This * limitation of liability shall not apply to liability for death or * personal injury resulting from such party's negligence to the * extent applicable law prohibits such limitation. Some * jurisdictions do not allow the exclusion or limitation of * incidental or consequential damages, so this exclusion and * limitation may not apply to You. * * 8. Litigation \u00a4 Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party's ability to bring cross-claims or counter-claims. 9. Miscellaneous \u00a4 This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor. 10. Versions of the License \u00a4 10.1. New Versions Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number. 10.2. Effect of New Versions You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward. 10.3. Modified Versions If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License). 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached. Exhibit A - Source Code Form License Notice \u00a4 This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice. You may add additional accurate notices of copyright ownership. Exhibit B - \"Incompatible With Secondary Licenses\" Notice \u00a4 This Source Code Form is \"Incompatible With Secondary Licenses\", as defined by the Mozilla Public License, v. 2.0.","title":"License"},{"location":"license/#mozilla-public-license-version-20","text":"Copyright (c) 2020, Capgemini Invent IDE All rights reserved.","title":"Mozilla Public License Version 2.0"},{"location":"license/#1-definitions","text":"1.1. \"Contributor\" means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software. 1.2. \"Contributor Version\" means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor's Contribution. 1.3. \"Contribution\" means Covered Software of a particular Contributor. 1.4. \"Covered Software\" means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof. 1.5. \"Incompatible With Secondary Licenses\" means (a) that the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or (b) that the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License. 1.6. \"Executable Form\" means any form of the work other than Source Code Form. 1.7. \"Larger Work\" means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software. 1.8. \"License\" means this document. 1.9. \"Licensable\" means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License. 1.10. \"Modifications\" means any of the following: (a) any file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or (b) any new file in Source Code Form that contains any Covered Software. 1.11. \"Patent Claims\" of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version. 1.12. \"Secondary License\" means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses. 1.13. \"Source Code Form\" means the form of the work preferred for making modifications. 1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising rights under this License. For legal entities, \"You\" includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, \"control\" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.","title":"1. Definitions"},{"location":"license/#2-license-grants-and-conditions","text":"2.1. Grants Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license: (a) under intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and (b) under Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version. 2.2. Effective Date The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution. 2.3. Limitations on Grant Scope The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor: (a) for any code that a Contributor has removed from Covered Software; or (b) for infringements caused by: (i) Your and any other third party's modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or (c) under Patent Claims infringed by Covered Software in the absence of its Contributions. This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4). 2.4. Subsequent Licenses No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3). 2.5. Representation Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License. 2.6. Fair Use This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents. 2.7. Conditions Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.","title":"2. License Grants and Conditions"},{"location":"license/#3-responsibilities","text":"3.1. Distribution of Source Form All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients' rights in the Source Code Form. 3.2. Distribution of Executable Form If You distribute Covered Software in Executable Form then: (a) such Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and (b) You may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients' rights in the Source Code Form under this License. 3.3. Distribution of a Larger Work You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s). 3.4. Notices You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies. 3.5. Application of Additional Terms You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.","title":"3. Responsibilities"},{"location":"license/#4-inability-to-comply-due-to-statute-or-regulation","text":"If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.","title":"4. Inability to Comply Due to Statute or Regulation"},{"location":"license/#5-termination","text":"5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice. 5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate. 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination. * Disclaimer of Warranty * ------------------------- * * Covered Software is provided under this License on an \"as is\" * basis, without warranty of any kind, either expressed, implied, or * statutory, including, without limitation, warranties that the * Covered Software is free of defects, merchantable, fit for a * particular purpose or non-infringing. The entire risk as to the * quality and performance of the Covered Software is with You. * Should any Covered Software prove defective in any respect, You * (not any Contributor) assume the cost of any necessary servicing, * repair, or correction. This disclaimer of warranty constitutes an * essential part of this License. No use of any Covered Software is * authorized under this License except under this disclaimer. * * * Limitation of Liability * -------------------------- * * Under no circumstances and under no legal theory, whether tort * (including negligence), contract, or otherwise, shall any * Contributor, or anyone who distributes Covered Software as * permitted above, be liable to You for any direct, indirect, * special, incidental, or consequential damages of any character * including, without limitation, damages for lost profits, loss of * goodwill, work stoppage, computer failure or malfunction, or any * and all other commercial damages or losses, even if such party * shall have been informed of the possibility of such damages. This * limitation of liability shall not apply to liability for death or * personal injury resulting from such party's negligence to the * extent applicable law prohibits such limitation. Some * jurisdictions do not allow the exclusion or limitation of * incidental or consequential damages, so this exclusion and * limitation may not apply to You. * *","title":"5. Termination"},{"location":"license/#8-litigation","text":"Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party's ability to bring cross-claims or counter-claims.","title":"8. Litigation"},{"location":"license/#9-miscellaneous","text":"This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.","title":"9. Miscellaneous"},{"location":"license/#10-versions-of-the-license","text":"10.1. New Versions Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number. 10.2. Effect of New Versions You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward. 10.3. Modified Versions If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License). 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.","title":"10. Versions of the License"},{"location":"license/#exhibit-a-source-code-form-license-notice","text":"This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice. You may add additional accurate notices of copyright ownership.","title":"Exhibit A - Source Code Form License Notice"},{"location":"license/#exhibit-b-incompatible-with-secondary-licenses-notice","text":"This Source Code Form is \"Incompatible With Secondary Licenses\", as defined by the Mozilla Public License, v. 2.0.","title":"Exhibit B - \"Incompatible With Secondary Licenses\" Notice"},{"location":"roadmap/","text":"TODO \u00a4 Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"TODO"},{"location":"roadmap/#todo","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"TODO"},{"location":"reference/doc_loader/","text":"\u00a4 DocumentLoader \u00a4 load ( file , output_type =< OutputType . NP : 1 > , max_num_pages = 1 , dpi = 300 ) staticmethod \u00a4 Loads in a document with a valid extension from filestorage, uploadfile or from disk Parameters: Name Type Description Default file Union[str, IO] File path or io object where the document is stored required output_type OutputType OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. <OutputType.NP: 1> max_num_pages int Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. 1 dpi int dpi to set when converting PDF to an image. Defaults to 300. 300 Exceptions: Type Description TypeError If the given file is not a str, pathlib.Path or file-like object with a read method DocumentLoaderException If the extension is not in the list of valid extensions DocumentLoaderException If there was a problem loading - corrupt file PasswordProtectedPDFException If the file was password protected Returns: Type Description Union[List[PIL.Image.Image], List[numpy.ndarray]] A list of PIL Images or numpy arrays Source code in doc_loader/doc_loader.py @staticmethod def load ( file : Union [ str , IO ], output_type : OutputType = OutputType . NP , max_num_pages : int = 1 , dpi : int = 300 ) -> Union [ List [ Image . Image ], List [ np . ndarray ]]: \"\"\"Loads in a document with a valid extension from filestorage, uploadfile or from disk Args: file (Union[str, IO]): File path or io object where the document is stored output_type (OutputType, optional): OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. max_num_pages (int, optional): Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. dpi (int, optional): dpi to set when converting PDF to an image. Defaults to 300. Raises: TypeError: If the given file is not a str, pathlib.Path or file-like object with a read method DocumentLoaderException: If the extension is not in the list of valid extensions DocumentLoaderException: If there was a problem loading - corrupt file PasswordProtectedPDFException: If the file was password protected Returns: A list of PIL Images or numpy arrays \"\"\" logger . info ( \"Loading file sent in the request\" ) if isinstance ( file , str ) or isinstance ( file , pathlib . Path ): # Covers filepath ext = os . path . splitext ( file )[ 1 ] . lower () elif hasattr ( file , \"filename\" ): # Covers werkzeug.FileStorage and starlette.UploadFile ext = os . path . splitext ( file . filename )[ 1 ] . lower () else : raise TypeError ( \"file must be a str or io object\" ) logger . info ( f \"Detected extension as { ext } , checking if there is a loader function for that extension\" ) loader = DocumentLoader . valid_extentions . get ( ext ) if not loader : raise DocumentLoaderException ( \"Invalid extension type, cannot load this type of file\" ) try : return loader ( file , output_type = output_type , max_num_pages = max_num_pages , dpi = dpi ) except PasswordProtectedPDFException : raise except FileNotFoundError : raise except Exception as e : raise DocumentLoaderException ( f \"Corrupt file, failed to load: full error, { e } \" )","title":"doc_loader.py"},{"location":"reference/doc_loader/#doc_loader.doc_loader","text":"","title":"doc_loader.doc_loader"},{"location":"reference/doc_loader/#doc_loader.doc_loader.DocumentLoader","text":"","title":"DocumentLoader"},{"location":"reference/doc_loader/#doc_loader.doc_loader.DocumentLoader.load","text":"Loads in a document with a valid extension from filestorage, uploadfile or from disk Parameters: Name Type Description Default file Union[str, IO] File path or io object where the document is stored required output_type OutputType OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. <OutputType.NP: 1> max_num_pages int Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. 1 dpi int dpi to set when converting PDF to an image. Defaults to 300. 300 Exceptions: Type Description TypeError If the given file is not a str, pathlib.Path or file-like object with a read method DocumentLoaderException If the extension is not in the list of valid extensions DocumentLoaderException If there was a problem loading - corrupt file PasswordProtectedPDFException If the file was password protected Returns: Type Description Union[List[PIL.Image.Image], List[numpy.ndarray]] A list of PIL Images or numpy arrays Source code in doc_loader/doc_loader.py @staticmethod def load ( file : Union [ str , IO ], output_type : OutputType = OutputType . NP , max_num_pages : int = 1 , dpi : int = 300 ) -> Union [ List [ Image . Image ], List [ np . ndarray ]]: \"\"\"Loads in a document with a valid extension from filestorage, uploadfile or from disk Args: file (Union[str, IO]): File path or io object where the document is stored output_type (OutputType, optional): OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. max_num_pages (int, optional): Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. dpi (int, optional): dpi to set when converting PDF to an image. Defaults to 300. Raises: TypeError: If the given file is not a str, pathlib.Path or file-like object with a read method DocumentLoaderException: If the extension is not in the list of valid extensions DocumentLoaderException: If there was a problem loading - corrupt file PasswordProtectedPDFException: If the file was password protected Returns: A list of PIL Images or numpy arrays \"\"\" logger . info ( \"Loading file sent in the request\" ) if isinstance ( file , str ) or isinstance ( file , pathlib . Path ): # Covers filepath ext = os . path . splitext ( file )[ 1 ] . lower () elif hasattr ( file , \"filename\" ): # Covers werkzeug.FileStorage and starlette.UploadFile ext = os . path . splitext ( file . filename )[ 1 ] . lower () else : raise TypeError ( \"file must be a str or io object\" ) logger . info ( f \"Detected extension as { ext } , checking if there is a loader function for that extension\" ) loader = DocumentLoader . valid_extentions . get ( ext ) if not loader : raise DocumentLoaderException ( \"Invalid extension type, cannot load this type of file\" ) try : return loader ( file , output_type = output_type , max_num_pages = max_num_pages , dpi = dpi ) except PasswordProtectedPDFException : raise except FileNotFoundError : raise except Exception as e : raise DocumentLoaderException ( f \"Corrupt file, failed to load: full error, { e } \" )","title":"load()"},{"location":"reference/errors/","text":"\u00a4 DocumentLoaderException \u00a4 NoTextToExtractError \u00a4 PasswordProtectedPDFException \u00a4 PDFInfoException \u00a4 PDFInfoFileNotFoundException \u00a4","title":"errors.py"},{"location":"reference/errors/#doc_loader.errors","text":"","title":"doc_loader.errors"},{"location":"reference/errors/#doc_loader.errors.DocumentLoaderException","text":"","title":"DocumentLoaderException"},{"location":"reference/errors/#doc_loader.errors.NoTextToExtractError","text":"","title":"NoTextToExtractError"},{"location":"reference/errors/#doc_loader.errors.PasswordProtectedPDFException","text":"","title":"PasswordProtectedPDFException"},{"location":"reference/errors/#doc_loader.errors.PDFInfoException","text":"","title":"PDFInfoException"},{"location":"reference/errors/#doc_loader.errors.PDFInfoFileNotFoundException","text":"","title":"PDFInfoFileNotFoundException"},{"location":"reference/page_counter/","text":"\u00a4 pdf_page_count ( file ) \u00a4 Gets the page count for a pdf using pdf info Parameters: Name Type Description Default file Union[str, IO] File path or io object where the document is stored required Exceptions: Type Description TypeError If file is not str, pathlib.Path or io object with read method Returns: Type Description int The page count inside the pdf Source code in doc_loader/page_counter.py def pdf_page_count ( file : Union [ str , IO ]) -> int : \"\"\"Gets the page count for a pdf using pdf info Args: file (Union[str, IO]): File path or io object where the document is stored Raises: TypeError: If file is not str, pathlib.Path or io object with `read` method Returns: The page count inside the pdf \"\"\" if hasattr ( file , \"file\" ): file = file . file if isinstance ( file , str ) or isinstance ( file , pathlib . Path ): count = pdfinfo ( str ( file )) . get ( \"Pages\" , None ) elif hasattr ( file , \"read\" ): logger . info ( f \"Determining page count for file\" ) count = pdfinfo_filestorage ( file ) . get ( \"Pages\" , None ) else : raise TypeError ( f \"file must be a str or io object: { file } \" ) if count : logger . info ( f \"Detected { count } pages in file\" ) return int ( count ) logger . info ( f \"Failed to determine number of pages in file\" ) return count pdfinfo ( path ) \u00a4 Wraps command line utility pdfinfo to extract the PDF meta information using poppler-utils This function parses the text output that looks like this: Title: PUBLIC MEETING AGENDA Author: Customer Support Creator: Microsoft Word 2010 Producer: Microsoft Word 2010 CreationDate: Thu Dec 20 14:44:56 2012 ModDate: Thu Dec 20 14:44:56 2012 Tagged: yes Pages: 2 Encrypted: no Page size: 612 x 792 pts (letter) File size: 104739 bytes Optimized: no PDF version: 1.5 Parameters: Name Type Description Default path str Path to file required Exceptions: Type Description PDFInfoException If pdfinfo cannot be found in the path PDFInfoFileNotFoundException If the file to be processed could not be found by pdfinfo PasswordProtectedPDFException If the pdf file was password protected Returns: Type Description Dict[str, str] The metainfo in a dictionary. Source code in doc_loader/page_counter.py def pdfinfo ( path : str ) -> Dict [ str , str ]: \"\"\" Wraps command line utility pdfinfo to extract the PDF meta information using poppler-utils This function parses the text output that looks like this: ``` Title: PUBLIC MEETING AGENDA Author: Customer Support Creator: Microsoft Word 2010 Producer: Microsoft Word 2010 CreationDate: Thu Dec 20 14:44:56 2012 ModDate: Thu Dec 20 14:44:56 2012 Tagged: yes Pages: 2 Encrypted: no Page size: 612 x 792 pts (letter) File size: 104739 bytes Optimized: no PDF version: 1.5 ``` Args: path (str): Path to file Raises: PDFInfoException: If pdfinfo cannot be found in the path PDFInfoFileNotFoundException: If the file to be processed could not be found by pdfinfo PasswordProtectedPDFException: If the pdf file was password protected Returns: The metainfo in a dictionary. \"\"\" cmd = \"/usr/bin/pdfinfo\" if not os . path . exists ( cmd ): raise PDFInfoException ( f \"System command not found: { cmd } \" ) if not os . path . exists ( path ): raise PDFInfoFileNotFoundException ( f \"Provided input file not found: { path } \" ) def _extract ( row ): \"\"\"Extracts the right hand value from a : delimited row\"\"\" return row . split ( \":\" , 1 )[ 1 ] . strip () . rstrip ( \"'\" ) output = {} labels = [ \"Title\" , \"Author\" , \"Creator\" , \"Producer\" , \"CreationDate\" , \"ModDate\" , \"Tagged\" , \"Pages\" , \"Encrypted\" , \"Page size\" , \"File size\" , \"Optimized\" , \"PDF version\" , ] try : cmd_output = subprocess . check_output ([ cmd , path ], stderr = subprocess . STDOUT ) for line in map ( str , cmd_output . splitlines ()): for label in labels : if label in line : output [ label ] = _extract ( line ) return output except subprocess . CalledProcessError as e : if \"Incorrect password\" in e . output . decode ( \"utf-8\" ): raise PasswordProtectedPDFException ( f \"PDF file is password protected: { e . output . decode ( 'utf-8' ) } \" ) raise except : raise pdfinfo_filestorage ( file_storage ) \u00a4 Wraps the functionality of pdfinfo to be used on fastapi.UploadFile and werkzeug.FileStorage objects Parameters: Name Type Description Default file_storage IO IO buffer PDF file to extract info from required Returns: Type Description Dict[str, str] The metainfo in a dictionary Source code in doc_loader/page_counter.py def pdfinfo_filestorage ( file_storage : IO ) -> Dict [ str , str ]: \"\"\"Wraps the functionality of pdfinfo to be used on fastapi.UploadFile and werkzeug.FileStorage objects Args: file_storage (IO): IO buffer PDF file to extract info from Returns: The metainfo in a dictionary \"\"\" if hasattr ( file_storage , \"file\" ): file_storage = file_storage . file fh , temp_filename = tempfile . mkstemp () try : with open ( temp_filename , \"wb\" ) as f : file_storage . seek ( 0 ) f . write ( file_storage . read ()) file_storage . seek ( 0 ) f . flush () try : return pdfinfo ( f . name ) except Exception as e : raise finally : os . close ( fh ) os . remove ( temp_filename )","title":"page_counter.py"},{"location":"reference/page_counter/#doc_loader.page_counter","text":"","title":"doc_loader.page_counter"},{"location":"reference/page_counter/#doc_loader.page_counter.pdf_page_count","text":"Gets the page count for a pdf using pdf info Parameters: Name Type Description Default file Union[str, IO] File path or io object where the document is stored required Exceptions: Type Description TypeError If file is not str, pathlib.Path or io object with read method Returns: Type Description int The page count inside the pdf Source code in doc_loader/page_counter.py def pdf_page_count ( file : Union [ str , IO ]) -> int : \"\"\"Gets the page count for a pdf using pdf info Args: file (Union[str, IO]): File path or io object where the document is stored Raises: TypeError: If file is not str, pathlib.Path or io object with `read` method Returns: The page count inside the pdf \"\"\" if hasattr ( file , \"file\" ): file = file . file if isinstance ( file , str ) or isinstance ( file , pathlib . Path ): count = pdfinfo ( str ( file )) . get ( \"Pages\" , None ) elif hasattr ( file , \"read\" ): logger . info ( f \"Determining page count for file\" ) count = pdfinfo_filestorage ( file ) . get ( \"Pages\" , None ) else : raise TypeError ( f \"file must be a str or io object: { file } \" ) if count : logger . info ( f \"Detected { count } pages in file\" ) return int ( count ) logger . info ( f \"Failed to determine number of pages in file\" ) return count","title":"pdf_page_count()"},{"location":"reference/page_counter/#doc_loader.page_counter.pdfinfo","text":"Wraps command line utility pdfinfo to extract the PDF meta information using poppler-utils This function parses the text output that looks like this: Title: PUBLIC MEETING AGENDA Author: Customer Support Creator: Microsoft Word 2010 Producer: Microsoft Word 2010 CreationDate: Thu Dec 20 14:44:56 2012 ModDate: Thu Dec 20 14:44:56 2012 Tagged: yes Pages: 2 Encrypted: no Page size: 612 x 792 pts (letter) File size: 104739 bytes Optimized: no PDF version: 1.5 Parameters: Name Type Description Default path str Path to file required Exceptions: Type Description PDFInfoException If pdfinfo cannot be found in the path PDFInfoFileNotFoundException If the file to be processed could not be found by pdfinfo PasswordProtectedPDFException If the pdf file was password protected Returns: Type Description Dict[str, str] The metainfo in a dictionary. Source code in doc_loader/page_counter.py def pdfinfo ( path : str ) -> Dict [ str , str ]: \"\"\" Wraps command line utility pdfinfo to extract the PDF meta information using poppler-utils This function parses the text output that looks like this: ``` Title: PUBLIC MEETING AGENDA Author: Customer Support Creator: Microsoft Word 2010 Producer: Microsoft Word 2010 CreationDate: Thu Dec 20 14:44:56 2012 ModDate: Thu Dec 20 14:44:56 2012 Tagged: yes Pages: 2 Encrypted: no Page size: 612 x 792 pts (letter) File size: 104739 bytes Optimized: no PDF version: 1.5 ``` Args: path (str): Path to file Raises: PDFInfoException: If pdfinfo cannot be found in the path PDFInfoFileNotFoundException: If the file to be processed could not be found by pdfinfo PasswordProtectedPDFException: If the pdf file was password protected Returns: The metainfo in a dictionary. \"\"\" cmd = \"/usr/bin/pdfinfo\" if not os . path . exists ( cmd ): raise PDFInfoException ( f \"System command not found: { cmd } \" ) if not os . path . exists ( path ): raise PDFInfoFileNotFoundException ( f \"Provided input file not found: { path } \" ) def _extract ( row ): \"\"\"Extracts the right hand value from a : delimited row\"\"\" return row . split ( \":\" , 1 )[ 1 ] . strip () . rstrip ( \"'\" ) output = {} labels = [ \"Title\" , \"Author\" , \"Creator\" , \"Producer\" , \"CreationDate\" , \"ModDate\" , \"Tagged\" , \"Pages\" , \"Encrypted\" , \"Page size\" , \"File size\" , \"Optimized\" , \"PDF version\" , ] try : cmd_output = subprocess . check_output ([ cmd , path ], stderr = subprocess . STDOUT ) for line in map ( str , cmd_output . splitlines ()): for label in labels : if label in line : output [ label ] = _extract ( line ) return output except subprocess . CalledProcessError as e : if \"Incorrect password\" in e . output . decode ( \"utf-8\" ): raise PasswordProtectedPDFException ( f \"PDF file is password protected: { e . output . decode ( 'utf-8' ) } \" ) raise except : raise","title":"pdfinfo()"},{"location":"reference/page_counter/#doc_loader.page_counter.pdfinfo_filestorage","text":"Wraps the functionality of pdfinfo to be used on fastapi.UploadFile and werkzeug.FileStorage objects Parameters: Name Type Description Default file_storage IO IO buffer PDF file to extract info from required Returns: Type Description Dict[str, str] The metainfo in a dictionary Source code in doc_loader/page_counter.py def pdfinfo_filestorage ( file_storage : IO ) -> Dict [ str , str ]: \"\"\"Wraps the functionality of pdfinfo to be used on fastapi.UploadFile and werkzeug.FileStorage objects Args: file_storage (IO): IO buffer PDF file to extract info from Returns: The metainfo in a dictionary \"\"\" if hasattr ( file_storage , \"file\" ): file_storage = file_storage . file fh , temp_filename = tempfile . mkstemp () try : with open ( temp_filename , \"wb\" ) as f : file_storage . seek ( 0 ) f . write ( file_storage . read ()) file_storage . seek ( 0 ) f . flush () try : return pdfinfo ( f . name ) except Exception as e : raise finally : os . close ( fh ) os . remove ( temp_filename )","title":"pdfinfo_filestorage()"},{"location":"reference/pdf_extract/","text":"\u00a4 extract_text_pdf ( path , max_num_pages = 1 , postprocess_page =< function < lambda > at 0x7f426f1bd0d0 > , * args , ** kwargs ) \u00a4 Extracts the text in every page within a readable PDF file Parameters: Name Type Description Default path Union[str, IO] File path or io object where the document is stored required max_num_pages int Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. 1 postprocess_page Callable Function to pass to postprocess the text on each page. Defaults to lambda x:x.strip(). <function <lambda> at 0x7f426f1bd0d0> Exceptions: Type Description TypeError If the given file is not a str, pathlib.Path or file-like object with a read method PasswordProtectedPDFException If the pdf was password protected NoTextToExtractError If the function failed to extract any text (eg pdf with all images) Returns: Type Description Tuple[int, List[str]] Number of pages in the, list of text in each page Source code in doc_loader/pdf_extract.py def extract_text_pdf ( path : Union [ str , IO ], max_num_pages : int = 1 , postprocess_page : Callable = lambda x : x . strip (), * args , ** kwargs ) -> Tuple [ int , List [ str ]]: \"\"\"Extracts the text in every page within a readable PDF file Args: path (Union[str, IO]): File path or io object where the document is stored max_num_pages (int, optional): Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. postprocess_page (Callable, optional): Function to pass to postprocess the text on each page. Defaults to lambda x:x.strip(). Raises: TypeError: If the given file is not a str, pathlib.Path or file-like object with a read method PasswordProtectedPDFException: If the pdf was password protected NoTextToExtractError: If the function failed to extract any text (eg pdf with all images) Returns: Number of pages in the, list of text in each page \"\"\" if hasattr ( path , \"file\" ): path = path . file page_count = pdf_page_count ( path ) if max_num_pages < 0 : max_num_pages = page_count logger . info ( f \"Passing file through MuPDF as a multi page pdf with { max_num_pages } max pages\" ) # Converting file into BytesIO memf = io . BytesIO () if hasattr ( path , \"read\" ): memf . write ( path . read ()) memf . seek ( 0 ) document = fitz_open ( stream = memf , filetype = \"pdf\" ) elif isinstance ( path , str ) or isinstance ( path , pathlib . Path ): document = fitz_open ( str ( path ), filetype = \"pdf\" ) else : raise TypeError ( \"path must be string or io object\" ) if document . needsPass : raise PasswordProtectedPDFException ( f \"Password protected PDF file path detected, PDF file path = { path } \" ) # Reading file and extracting text text = [] for i , page in enumerate ( document ): if i + 1 > max_num_pages : break t = postprocess_page ( page . getText ( \"text\" )) text . append ( t ) full_text_len = len ( \"\" . join ( text )) if full_text_len > 0 : return page_count , text raise NoTextToExtractError ( f \"File has length { full_text_len } \" , 1008 )","title":"pdf_extract.py"},{"location":"reference/pdf_extract/#doc_loader.pdf_extract","text":"","title":"doc_loader.pdf_extract"},{"location":"reference/pdf_extract/#doc_loader.pdf_extract.extract_text_pdf","text":"Extracts the text in every page within a readable PDF file Parameters: Name Type Description Default path Union[str, IO] File path or io object where the document is stored required max_num_pages int Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. 1 postprocess_page Callable Function to pass to postprocess the text on each page. Defaults to lambda x:x.strip(). <function <lambda> at 0x7f426f1bd0d0> Exceptions: Type Description TypeError If the given file is not a str, pathlib.Path or file-like object with a read method PasswordProtectedPDFException If the pdf was password protected NoTextToExtractError If the function failed to extract any text (eg pdf with all images) Returns: Type Description Tuple[int, List[str]] Number of pages in the, list of text in each page Source code in doc_loader/pdf_extract.py def extract_text_pdf ( path : Union [ str , IO ], max_num_pages : int = 1 , postprocess_page : Callable = lambda x : x . strip (), * args , ** kwargs ) -> Tuple [ int , List [ str ]]: \"\"\"Extracts the text in every page within a readable PDF file Args: path (Union[str, IO]): File path or io object where the document is stored max_num_pages (int, optional): Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. postprocess_page (Callable, optional): Function to pass to postprocess the text on each page. Defaults to lambda x:x.strip(). Raises: TypeError: If the given file is not a str, pathlib.Path or file-like object with a read method PasswordProtectedPDFException: If the pdf was password protected NoTextToExtractError: If the function failed to extract any text (eg pdf with all images) Returns: Number of pages in the, list of text in each page \"\"\" if hasattr ( path , \"file\" ): path = path . file page_count = pdf_page_count ( path ) if max_num_pages < 0 : max_num_pages = page_count logger . info ( f \"Passing file through MuPDF as a multi page pdf with { max_num_pages } max pages\" ) # Converting file into BytesIO memf = io . BytesIO () if hasattr ( path , \"read\" ): memf . write ( path . read ()) memf . seek ( 0 ) document = fitz_open ( stream = memf , filetype = \"pdf\" ) elif isinstance ( path , str ) or isinstance ( path , pathlib . Path ): document = fitz_open ( str ( path ), filetype = \"pdf\" ) else : raise TypeError ( \"path must be string or io object\" ) if document . needsPass : raise PasswordProtectedPDFException ( f \"Password protected PDF file path detected, PDF file path = { path } \" ) # Reading file and extracting text text = [] for i , page in enumerate ( document ): if i + 1 > max_num_pages : break t = postprocess_page ( page . getText ( \"text\" )) text . append ( t ) full_text_len = len ( \"\" . join ( text )) if full_text_len > 0 : return page_count , text raise NoTextToExtractError ( f \"File has length { full_text_len } \" , 1008 )","title":"extract_text_pdf()"},{"location":"reference/readers/","text":"\u00a4 read_jpg_png ( path , output_type =< OutputType . NP : 1 > , * args , ** kwargs ) \u00a4 Reads in a JPG or PNG image and converts it into a list of one PIL.Image/np.ndarray Parameters: Name Type Description Default path Union[str, IO] File path or object where the image is stored required output_type OutputType OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. <OutputType.NP: 1> Exceptions: Type Description TypeError If output_type is not OutputType.NP or OutputType.PIL Returns: Type Description Tuple[int, Union[List[numpy.ndarray], List[PIL.Image.Image]]] The number of pages in the image, and a list of PIL Images or numpy arrays Source code in doc_loader/readers.py def read_jpg_png ( path : Union [ str , IO ], output_type : OutputType = OutputType . NP , * args , ** kwargs ) -> Tuple [ int , Union [ List [ np . ndarray ], List [ Image . Image ]]]: \"\"\"Reads in a JPG or PNG image and converts it into a list of one PIL.Image/np.ndarray Args: path (Union[str, IO]): File path or object where the image is stored output_type (OutputType, optional): OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. Raises: TypeError: If output_type is not OutputType.NP or OutputType.PIL Returns: The number of pages in the image, and a list of PIL Images or numpy arrays \"\"\" if hasattr ( path , \"file\" ): # Added for starlette.Uploadfile path = path . file logger . info ( f \"Loading image as a single jpg/png image\" ) if output_type == OutputType . NP : return 1 , [ pil_to_numpy ( apply_exif_orientation ( Image . open ( path ) . convert ( \"RGB\" )))] elif output_type == OutputType . PIL : return 1 , [ apply_exif_orientation ( Image . open ( path ) . convert ( \"RGB\" ))] else : raise TypeError ( \"output_type must be one of 'np' or 'pil'\" ) read_pdf ( path , output_type =< OutputType . NP : 1 > , max_num_pages = 1 , dpi = 300 , * args , ** kwargs ) \u00a4 Reads in a PDF and converts it into a list of PIL.Images/np.ndarray, only if given PDF is not password protected Parameters: Name Type Description Default path Union[str, IO] File path or object where the image is stored required output_type OutputType OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. <OutputType.NP: 1> max_num_pages int Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. 1 dpi int dpi to set when converting PDF to an image. Defaults to 300. 300 Exceptions: Type Description TypeError If output_type is not OutputType.NP or OutputType.PIL TypeError If path is not a string or io object PasswordProtectedPDFException If the pdf was password protected Returns: Type Description Tuple[int, Union[List[numpy.ndarray], List[PIL.Image.Image]]] The number of pages in the image, and a list of PIL Images or numpy arrays Source code in doc_loader/readers.py def read_pdf ( path : Union [ str , IO ], output_type : OutputType = OutputType . NP , max_num_pages : int = 1 , dpi : int = 300 , * args , ** kwargs , ) -> Tuple [ int , Union [ List [ np . ndarray ], List [ Image . Image ]]]: \"\"\"Reads in a PDF and converts it into a list of PIL.Images/np.ndarray, only if given PDF is not password protected Args: path (Union[str, IO]): File path or object where the image is stored output_type (OutputType, optional): OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. max_num_pages (int, optional): Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. dpi (int, optional): dpi to set when converting PDF to an image. Defaults to 300. Raises: TypeError: If output_type is not OutputType.NP or OutputType.PIL TypeError: If path is not a string or io object PasswordProtectedPDFException: If the pdf was password protected Returns: The number of pages in the image, and a list of PIL Images or numpy arrays \"\"\" if hasattr ( path , \"file\" ): path = path . file page_count = pdf_page_count ( path ) if max_num_pages < 0 : max_num_pages = page_count logger . info ( f \"Loading image as a multi page pdf with { max_num_pages } max pages\" ) try : if isinstance ( path , str ) or isinstance ( path , pathlib . Path ): if output_type == OutputType . NP : imgs = [ pil_to_numpy ( im . convert ( \"RGB\" )) for im in convert_from_path ( path , last_page = max_num_pages , dpi = dpi ) ] elif output_type == OutputType . PIL : imgs = [ im . convert ( \"RGB\" ) for im in convert_from_path ( path , last_page = max_num_pages , dpi = dpi )] else : raise TypeError ( \"output_type must be one of 'np' or 'pil'\" ) elif hasattr ( path , \"read\" ): path . seek ( 0 ) if output_type == OutputType . NP : imgs = [ pil_to_numpy ( im . convert ( \"RGB\" )) for im in convert_from_bytes ( path . read (), last_page = max_num_pages , dpi = dpi ) ] elif output_type == OutputType . PIL : imgs = [ im . convert ( \"RGB\" ) for im in convert_from_bytes ( path . read (), last_page = max_num_pages , dpi = dpi )] else : raise TypeError ( \"output_type must be one of 'np' or 'pil'\" ) else : raise TypeError ( \"path must be string or io object\" ) except Exception as e : if \"Incorrect password\" in str ( e ): raise PasswordProtectedPDFException ( f \"Password protected PDF file path detected, PDF file path = { path } \" ) raise return page_count , imgs read_tiff ( path , output_type =< OutputType . NP : 1 > , max_num_pages = 1 , * args , ** kwargs ) \u00a4 Reads in an TIFF image and converts it into a list of PIL/numpy images Parameters: Name Type Description Default path Union[str, IO] File path or object where the image is stored required output_type OutputType OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. <OutputType.NP: 1> max_num_pages int Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. 1 Exceptions: Type Description TypeError If output_type is not OutputType.NP or OutputType.PIL Returns: Type Description Tuple[int, Union[List[numpy.ndarray], List[PIL.Image.Image]]] The number of pages in the image, and a list of PIL Images or numpy arrays Source code in doc_loader/readers.py def read_tiff ( path : Union [ str , IO ], output_type : OutputType = OutputType . NP , max_num_pages : int = 1 , * args , ** kwargs ) -> Tuple [ int , Union [ List [ np . ndarray ], List [ Image . Image ]]]: \"\"\"Reads in an TIFF image and converts it into a list of PIL/numpy images Args: path (Union[str, IO]): File path or object where the image is stored output_type (OutputType, optional): OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. max_num_pages (int, optional): Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. Raises: TypeError: If output_type is not OutputType.NP or OutputType.PIL Returns: The number of pages in the image, and a list of PIL Images or numpy arrays \"\"\" if hasattr ( path , \"file\" ): # Added for starlette.Uploadfile path = path . file img = Image . open ( path ) if max_num_pages < 0 : max_num_pages = img . n_frames n_frames = max ( 1 , min ( max_num_pages , img . n_frames )) logger . info ( f \"Loading image as a multi page tiff with { n_frames } pages\" ) images = [] if output_type == OutputType . NP : for i in range ( n_frames ): img . seek ( i ) images . append ( pil_to_numpy ( img . convert ( \"RGB\" ))) elif output_type == OutputType . PIL : for i in range ( n_frames ): img . seek ( i ) images . append ( img . convert ( \"RGB\" )) else : raise TypeError ( f \"output_type must be one of 'np' or 'pil', { output_type } \" ) return img . n_frames , images","title":"readers.py"},{"location":"reference/readers/#doc_loader.readers","text":"","title":"doc_loader.readers"},{"location":"reference/readers/#doc_loader.readers.read_jpg_png","text":"Reads in a JPG or PNG image and converts it into a list of one PIL.Image/np.ndarray Parameters: Name Type Description Default path Union[str, IO] File path or object where the image is stored required output_type OutputType OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. <OutputType.NP: 1> Exceptions: Type Description TypeError If output_type is not OutputType.NP or OutputType.PIL Returns: Type Description Tuple[int, Union[List[numpy.ndarray], List[PIL.Image.Image]]] The number of pages in the image, and a list of PIL Images or numpy arrays Source code in doc_loader/readers.py def read_jpg_png ( path : Union [ str , IO ], output_type : OutputType = OutputType . NP , * args , ** kwargs ) -> Tuple [ int , Union [ List [ np . ndarray ], List [ Image . Image ]]]: \"\"\"Reads in a JPG or PNG image and converts it into a list of one PIL.Image/np.ndarray Args: path (Union[str, IO]): File path or object where the image is stored output_type (OutputType, optional): OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. Raises: TypeError: If output_type is not OutputType.NP or OutputType.PIL Returns: The number of pages in the image, and a list of PIL Images or numpy arrays \"\"\" if hasattr ( path , \"file\" ): # Added for starlette.Uploadfile path = path . file logger . info ( f \"Loading image as a single jpg/png image\" ) if output_type == OutputType . NP : return 1 , [ pil_to_numpy ( apply_exif_orientation ( Image . open ( path ) . convert ( \"RGB\" )))] elif output_type == OutputType . PIL : return 1 , [ apply_exif_orientation ( Image . open ( path ) . convert ( \"RGB\" ))] else : raise TypeError ( \"output_type must be one of 'np' or 'pil'\" )","title":"read_jpg_png()"},{"location":"reference/readers/#doc_loader.readers.read_pdf","text":"Reads in a PDF and converts it into a list of PIL.Images/np.ndarray, only if given PDF is not password protected Parameters: Name Type Description Default path Union[str, IO] File path or object where the image is stored required output_type OutputType OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. <OutputType.NP: 1> max_num_pages int Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. 1 dpi int dpi to set when converting PDF to an image. Defaults to 300. 300 Exceptions: Type Description TypeError If output_type is not OutputType.NP or OutputType.PIL TypeError If path is not a string or io object PasswordProtectedPDFException If the pdf was password protected Returns: Type Description Tuple[int, Union[List[numpy.ndarray], List[PIL.Image.Image]]] The number of pages in the image, and a list of PIL Images or numpy arrays Source code in doc_loader/readers.py def read_pdf ( path : Union [ str , IO ], output_type : OutputType = OutputType . NP , max_num_pages : int = 1 , dpi : int = 300 , * args , ** kwargs , ) -> Tuple [ int , Union [ List [ np . ndarray ], List [ Image . Image ]]]: \"\"\"Reads in a PDF and converts it into a list of PIL.Images/np.ndarray, only if given PDF is not password protected Args: path (Union[str, IO]): File path or object where the image is stored output_type (OutputType, optional): OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. max_num_pages (int, optional): Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. dpi (int, optional): dpi to set when converting PDF to an image. Defaults to 300. Raises: TypeError: If output_type is not OutputType.NP or OutputType.PIL TypeError: If path is not a string or io object PasswordProtectedPDFException: If the pdf was password protected Returns: The number of pages in the image, and a list of PIL Images or numpy arrays \"\"\" if hasattr ( path , \"file\" ): path = path . file page_count = pdf_page_count ( path ) if max_num_pages < 0 : max_num_pages = page_count logger . info ( f \"Loading image as a multi page pdf with { max_num_pages } max pages\" ) try : if isinstance ( path , str ) or isinstance ( path , pathlib . Path ): if output_type == OutputType . NP : imgs = [ pil_to_numpy ( im . convert ( \"RGB\" )) for im in convert_from_path ( path , last_page = max_num_pages , dpi = dpi ) ] elif output_type == OutputType . PIL : imgs = [ im . convert ( \"RGB\" ) for im in convert_from_path ( path , last_page = max_num_pages , dpi = dpi )] else : raise TypeError ( \"output_type must be one of 'np' or 'pil'\" ) elif hasattr ( path , \"read\" ): path . seek ( 0 ) if output_type == OutputType . NP : imgs = [ pil_to_numpy ( im . convert ( \"RGB\" )) for im in convert_from_bytes ( path . read (), last_page = max_num_pages , dpi = dpi ) ] elif output_type == OutputType . PIL : imgs = [ im . convert ( \"RGB\" ) for im in convert_from_bytes ( path . read (), last_page = max_num_pages , dpi = dpi )] else : raise TypeError ( \"output_type must be one of 'np' or 'pil'\" ) else : raise TypeError ( \"path must be string or io object\" ) except Exception as e : if \"Incorrect password\" in str ( e ): raise PasswordProtectedPDFException ( f \"Password protected PDF file path detected, PDF file path = { path } \" ) raise return page_count , imgs","title":"read_pdf()"},{"location":"reference/readers/#doc_loader.readers.read_tiff","text":"Reads in an TIFF image and converts it into a list of PIL/numpy images Parameters: Name Type Description Default path Union[str, IO] File path or object where the image is stored required output_type OutputType OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. <OutputType.NP: 1> max_num_pages int Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. 1 Exceptions: Type Description TypeError If output_type is not OutputType.NP or OutputType.PIL Returns: Type Description Tuple[int, Union[List[numpy.ndarray], List[PIL.Image.Image]]] The number of pages in the image, and a list of PIL Images or numpy arrays Source code in doc_loader/readers.py def read_tiff ( path : Union [ str , IO ], output_type : OutputType = OutputType . NP , max_num_pages : int = 1 , * args , ** kwargs ) -> Tuple [ int , Union [ List [ np . ndarray ], List [ Image . Image ]]]: \"\"\"Reads in an TIFF image and converts it into a list of PIL/numpy images Args: path (Union[str, IO]): File path or object where the image is stored output_type (OutputType, optional): OutputType.NP or OutputType.PIL. Defaults to OutputType.NP. max_num_pages (int, optional): Max number of pages to return, if set to negative then will use all pages in the document. Defaults to 1. Raises: TypeError: If output_type is not OutputType.NP or OutputType.PIL Returns: The number of pages in the image, and a list of PIL Images or numpy arrays \"\"\" if hasattr ( path , \"file\" ): # Added for starlette.Uploadfile path = path . file img = Image . open ( path ) if max_num_pages < 0 : max_num_pages = img . n_frames n_frames = max ( 1 , min ( max_num_pages , img . n_frames )) logger . info ( f \"Loading image as a multi page tiff with { n_frames } pages\" ) images = [] if output_type == OutputType . NP : for i in range ( n_frames ): img . seek ( i ) images . append ( pil_to_numpy ( img . convert ( \"RGB\" ))) elif output_type == OutputType . PIL : for i in range ( n_frames ): img . seek ( i ) images . append ( img . convert ( \"RGB\" )) else : raise TypeError ( f \"output_type must be one of 'np' or 'pil', { output_type } \" ) return img . n_frames , images","title":"read_tiff()"},{"location":"reference/types/","text":"\u00a4 OutputType \u00a4 An enumeration. NP \u00a4 PIL \u00a4","title":"types.py"},{"location":"reference/types/#doc_loader.types","text":"","title":"doc_loader.types"},{"location":"reference/types/#doc_loader.types.OutputType","text":"An enumeration.","title":"OutputType"},{"location":"reference/types/#doc_loader.types.OutputType.NP","text":"","title":"NP"},{"location":"reference/types/#doc_loader.types.OutputType.PIL","text":"","title":"PIL"},{"location":"reference/utils/","text":"\u00a4 apply_exif_orientation ( image ) \u00a4 Applies the exif orientation correctly. Parameters: Name Type Description Default image Image a PIL image required Returns: Type Description Image The PIL image with exif orientation applied, if applicable This code exists per the bug: https://github.com/python-pillow/Pillow/issues/3973 with the function `ImageOps.exif_transpose`. The Pillow source raises errors with various methods, especially `tobytes` Function based on: https://github.com/wkentaro/labelme/blob/v4.5.4/labelme/utils/image.py#L59 https://github.com/python-pillow/Pillow/blob/7.1.2/src/PIL/ImageOps.py#L527 Source code in doc_loader/utils.py def apply_exif_orientation ( image : Image . Image ) -> Image . Image : \"\"\"Applies the exif orientation correctly. Args: image (Image.Image): a PIL image Returns: The PIL image with exif orientation applied, if applicable ``` This code exists per the bug: https://github.com/python-pillow/Pillow/issues/3973 with the function `ImageOps.exif_transpose`. The Pillow source raises errors with various methods, especially `tobytes` Function based on: https://github.com/wkentaro/labelme/blob/v4.5.4/labelme/utils/image.py#L59 https://github.com/python-pillow/Pillow/blob/7.1.2/src/PIL/ImageOps.py#L527 ``` \"\"\" if not hasattr ( image , \"getexif\" ): return image try : exif = image . getexif () except Exception : # https://github.com/facebookresearch/detectron2/issues/1885 exif = None if exif is None : return image # https://www.exiv2.org/tags.html _EXIF_ORIENT = 274 # exif 'Orientation' tag orientation = exif . get ( _EXIF_ORIENT ) method = { 2 : Image . FLIP_LEFT_RIGHT , 3 : Image . ROTATE_180 , 4 : Image . FLIP_TOP_BOTTOM , 5 : Image . TRANSPOSE , 6 : Image . ROTATE_270 , 7 : Image . TRANSVERSE , 8 : Image . ROTATE_90 , } . get ( orientation ) if method is not None : return image . transpose ( method ) return image optional_import ( module , name = None , package = None ) \u00a4 Allows us to make an optional import Parameters: Name Type Description Default module str Name of the module we want to load eg yaml required name str name of the function you want to load. Defaults to None. None package str Name of the package incase it is different from the module name. Defaults to None. None Examples: from yaml import safe_load as load # would be load = optional_import ( 'yaml' , 'safe_load' , package = 'pyyaml' ) Exceptions: Type Description ValueError If there was an import error for the module that was trying to be loaded Returns: Type Description Callable Either a function to raise the exception or the function from the module Source code in doc_loader/utils.py def optional_import ( module : str , name : str = None , package : str = None ) -> Callable : \"\"\"Allows us to make an optional import Args: module (str): Name of the module we want to load eg yaml name (str, optional): name of the function you want to load. Defaults to None. package (str, optional): Name of the package incase it is different from the module name. Defaults to None. Example: ```python from yaml import safe_load as load # would be load = optional_import('yaml', 'safe_load', package='pyyaml') ``` Raises: ValueError: If there was an import error for the module that was trying to be loaded Returns: Either a function to raise the exception or the function from the module \"\"\" try : module = importlib . import_module ( module ) return module if name is None else getattr ( module , name ) except ImportError as e : if package is None : package = module msg = f \"install the ' { package } ' package to make use of this feature\" import_error = e def _failed_import ( * args , ** kwargs ): raise ValueError ( msg ) from import_error return _failed_import pil_to_numpy ( image ) \u00a4 Convert PIL image to numpy array of target format. Parameters: Name Type Description Default image Image A PIL image to convert to numpy required Returns: Type Description ndarray The PIL image converted to a numpy array Source code in doc_loader/utils.py def pil_to_numpy ( image : Image . Image ) -> np . ndarray : \"\"\"Convert PIL image to numpy array of target format. Args: image (Image.Image): A PIL image to convert to numpy Returns: The PIL image converted to a numpy array \"\"\" return np . asarray ( image . convert ( \"RGB\" ))","title":"utils.py"},{"location":"reference/utils/#doc_loader.utils","text":"","title":"doc_loader.utils"},{"location":"reference/utils/#doc_loader.utils.apply_exif_orientation","text":"Applies the exif orientation correctly. Parameters: Name Type Description Default image Image a PIL image required Returns: Type Description Image The PIL image with exif orientation applied, if applicable This code exists per the bug: https://github.com/python-pillow/Pillow/issues/3973 with the function `ImageOps.exif_transpose`. The Pillow source raises errors with various methods, especially `tobytes` Function based on: https://github.com/wkentaro/labelme/blob/v4.5.4/labelme/utils/image.py#L59 https://github.com/python-pillow/Pillow/blob/7.1.2/src/PIL/ImageOps.py#L527 Source code in doc_loader/utils.py def apply_exif_orientation ( image : Image . Image ) -> Image . Image : \"\"\"Applies the exif orientation correctly. Args: image (Image.Image): a PIL image Returns: The PIL image with exif orientation applied, if applicable ``` This code exists per the bug: https://github.com/python-pillow/Pillow/issues/3973 with the function `ImageOps.exif_transpose`. The Pillow source raises errors with various methods, especially `tobytes` Function based on: https://github.com/wkentaro/labelme/blob/v4.5.4/labelme/utils/image.py#L59 https://github.com/python-pillow/Pillow/blob/7.1.2/src/PIL/ImageOps.py#L527 ``` \"\"\" if not hasattr ( image , \"getexif\" ): return image try : exif = image . getexif () except Exception : # https://github.com/facebookresearch/detectron2/issues/1885 exif = None if exif is None : return image # https://www.exiv2.org/tags.html _EXIF_ORIENT = 274 # exif 'Orientation' tag orientation = exif . get ( _EXIF_ORIENT ) method = { 2 : Image . FLIP_LEFT_RIGHT , 3 : Image . ROTATE_180 , 4 : Image . FLIP_TOP_BOTTOM , 5 : Image . TRANSPOSE , 6 : Image . ROTATE_270 , 7 : Image . TRANSVERSE , 8 : Image . ROTATE_90 , } . get ( orientation ) if method is not None : return image . transpose ( method ) return image","title":"apply_exif_orientation()"},{"location":"reference/utils/#doc_loader.utils.optional_import","text":"Allows us to make an optional import Parameters: Name Type Description Default module str Name of the module we want to load eg yaml required name str name of the function you want to load. Defaults to None. None package str Name of the package incase it is different from the module name. Defaults to None. None Examples: from yaml import safe_load as load # would be load = optional_import ( 'yaml' , 'safe_load' , package = 'pyyaml' ) Exceptions: Type Description ValueError If there was an import error for the module that was trying to be loaded Returns: Type Description Callable Either a function to raise the exception or the function from the module Source code in doc_loader/utils.py def optional_import ( module : str , name : str = None , package : str = None ) -> Callable : \"\"\"Allows us to make an optional import Args: module (str): Name of the module we want to load eg yaml name (str, optional): name of the function you want to load. Defaults to None. package (str, optional): Name of the package incase it is different from the module name. Defaults to None. Example: ```python from yaml import safe_load as load # would be load = optional_import('yaml', 'safe_load', package='pyyaml') ``` Raises: ValueError: If there was an import error for the module that was trying to be loaded Returns: Either a function to raise the exception or the function from the module \"\"\" try : module = importlib . import_module ( module ) return module if name is None else getattr ( module , name ) except ImportError as e : if package is None : package = module msg = f \"install the ' { package } ' package to make use of this feature\" import_error = e def _failed_import ( * args , ** kwargs ): raise ValueError ( msg ) from import_error return _failed_import","title":"optional_import()"},{"location":"reference/utils/#doc_loader.utils.pil_to_numpy","text":"Convert PIL image to numpy array of target format. Parameters: Name Type Description Default image Image A PIL image to convert to numpy required Returns: Type Description ndarray The PIL image converted to a numpy array Source code in doc_loader/utils.py def pil_to_numpy ( image : Image . Image ) -> np . ndarray : \"\"\"Convert PIL image to numpy array of target format. Args: image (Image.Image): A PIL image to convert to numpy Returns: The PIL image converted to a numpy array \"\"\" return np . asarray ( image . convert ( \"RGB\" ))","title":"pil_to_numpy()"}]}